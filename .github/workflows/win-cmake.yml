# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: V1 - Win build

## Auto run workflow, only if we have a tag that starts with v*
on:
  push:
    tags:
      - '*'
  workflow_dispatch:


jobs:

  build-win:
    #if: ( 1 == 2 )
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest ]
        build_type: [ Debug, Release ]
        #build_type: [ Debug ]
        c_compiler: [ cl ]
        cpp_compiler: [ cl ]

    steps:
      - uses: actions/checkout@v4

      - name: Set Windows reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}\cmake_build" >> "$GITHUB_OUTPUT"
          echo "target_folder=${{ github.workspace }}\release\win_x64" >> "$GITHUB_OUTPUT"
          echo "plugin_name=test_yaml01" >> "$GITHUB_OUTPUT"
          echo "OS Build: ${{ matrix.os }}"


      - name: Check Windows Stats
        shell: cmd
        run: |
          systeminfo
          wmic cpu get Name, NumberOfCores, MaxClockSpeed
          REM wmic NumberOfCores
          REM echo "core-count=$( wmic NumberOfCores )" >> "$GITHUB_OUTPUT"
          echo "Workspace: ${{ github.workspace }} "
          md cmake_build
          DIR ${{ github.workspace }}


      - name: Configure & Build Windows Binaries using CMake
        shell: cmd
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: |
          echo "Prepare CMake Build ${{ matrix.build_type }}"
          cmake -B ${{ steps.strings.outputs.build-output-dir }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -S ${{ github.workspace }}          
          
          REM Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
          echo "Running CMake Build"
          cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} -j 2


      - name: Post Build - Prepare binaries folder prior to loading into artifact
        shell: cmd
        run: |
          REM echo "Output Folder Tree and Files in '${{ steps.strings.outputs.build-output-dir }}' folder:"          
          REM dir /S ${{ steps.strings.outputs.build-output-dir }}          
          REM for /R "${{ steps.strings.outputs.build-output-dir }}" "%a" IN (*.xpl) DO echo "%a"
          
          
          echo "make release folder"          
          md ${{ steps.strings.outputs.target_folder }}

          echo "Copy all ".xpl" files to release folder:"
          IF "${{ matrix.build_type }}" == "Release" (
             echo "Coping the Release binaries"
             echo copy /B /Y "${{ steps.strings.outputs.build-output-dir }}\Release\${{ steps.strings.outputs.plugin_name }}.exe" "${{ steps.strings.outputs.target_folder }}\" 
             copy /B /Y "${{ steps.strings.outputs.build-output-dir }}\Release\${{ steps.strings.outputs.plugin_name }}.exe" "${{ steps.strings.outputs.target_folder }}\"
             echo copy /B /Y "${{ steps.strings.outputs.build-output-dir }}\Release\*.exe" "${{ steps.strings.outputs.target_folder }}\"
             copy /B /Y "${{ steps.strings.outputs.build-output-dir }}\Release\*.exe" "${{ steps.strings.outputs.target_folder }}\"
          ) ELSE (
            echo "Coping the Debug binaries"
            echo copy /B /Y "${{ steps.strings.outputs.build-output-dir }}\Debug\${{ steps.strings.outputs.plugin_name }}.exe" "${{ steps.strings.outputs.target_folder }}\${{ steps.strings.outputs.plugin_name }}.xpl.D" 
            copy /B /Y "${{ steps.strings.outputs.build-output-dir }}\Debug\${{ steps.strings.outputs.plugin_name }}.exe" "${{ steps.strings.outputs.target_folder }}\${{ steps.strings.outputs.plugin_name }}.xpl.D"
            echo copy /B /Y "${{ steps.strings.outputs.build-output-dir }}\Debug\*.exe" "${{ steps.strings.outputs.target_folder }}\${{ steps.strings.outputs.plugin_name }}.xpl.D"
            copy /B /Y "${{ steps.strings.outputs.build-output-dir }}\Debug\*.exe" "${{ steps.strings.outputs.target_folder }}\${{ steps.strings.outputs.plugin_name }}.xpl.D"
          )
          echo "Display Release Structure:"
          dir /S ${{ steps.strings.outputs.target_folder }}

          REM for /R "${{ steps.strings.outputs.build-output-dir }}" "%a" IN (missionx.xpl) DO copy /B /Y "%a" "${{ steps.strings.outputs.target_folder }}/missionx.xpl.D"


      - name: Upload Windows Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-win-${{ matrix.build_type }}
          path: |
            ${{ github.workspace }}/release/*
            

  build:
    runs-on: ubuntu-22.04
    needs: [build-win]
    # Steps to download artifact and combine to final build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set build reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}\build\missionx" >> "$GITHUB_OUTPUT"          
          echo "plugin_name=test_yaml01" >> "$GITHUB_OUTPUT"
          echo "OS Build: ${{ matrix.os }}"

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./download

      - name: Prepare release folder
        shell: bash
        run: |
          echo -e "Display download folder content"
          ls -ltR ./download
          
          echo -e "Create the build folder"
          mkdir -p ${{ github.output.strings.build-output-dir }}
          ls -l
          
          #echo -e "Copy .xpl files to the build folder:"
          #cp ./download/*/*.xpl ${{ github.output.strings.build-output-dir }}
          
          
          
          
          
          
          
          
