# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Release for - Windows, MacOS and Linux

## Auto run workflow, only if we have a tag that starts with v*
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:


jobs:
  pre-build:
    #if: ( 1 == 2 )
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set global reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "global-test-var=This is a test" >> "$GITHUB_OUTPUT"
          
          echo -e "\nGlobal Variable value for 'global-test-var' is: ${{ steps.strings.outputs.global-test-var }} \n"
  

  build-osx:
    if: ( 1 == 2 )
    runs-on: macos-14
    needs: [pre-build]
    strategy:
      fail-fast: false
      matrix:
        build_type: [ Debug, Release ]
        c_compiler: [ clang ]
        cpp_compiler: [ clang++ ]

    steps:
      - uses: actions/checkout@v4

      - name: Set MacOS reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/cmake_build" >> "$GITHUB_OUTPUT"
          echo "target-folder=${{ github.workspace }}/release/mac_x64" >> "$GITHUB_OUTPUT"
          echo "plugin-name=test_yaml" >> "$GITHUB_OUTPUT"
          echo "OS Build: ${{ matrix.os }}"

      - name: Check MacOS Stats
        shell: bash
        run: |
          echo -e "\n---->\nhw.physicalcpu:"
          sysctl -n hw.physicalcpu
          echo -e "\nhw.logicalcpu:"
          sysctl -n hw.logicalcpu
          echo -e "\nSystem Profiler - Hardware:"
          system_profiler SPHardwareDataType
          echo -e "\n---------------------\n"

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}


      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} -- -j 4


      - name: Post Build - Prepare binaries folder prior to loading into artifact
        shell: bash
        run: |
          echo "make release folder"
          mkdir -p ${{ steps.strings.outputs.target-folder }}
          
          echo "Display files in the working folders"
          find ${{ steps.strings.outputs.build-output-dir }} -maxdepth 2 -type f          
          
          if [[ "${{ matrix.build_type }}" == "Release" ]]; then
            echo -e "Coping the Release binaries"
            cd ${{ steps.strings.outputs.build-output-dir }}
            ls -l
            cp ${{ steps.strings.outputs.plugin-name }}  "${{ steps.strings.outputs.target-folder }}/${{ steps.strings.outputs.plugin-name }}"
            ls -l ${{ steps.strings.outputs.target-folder }}
          else
            echo -e "Coping the Debug binaries"
            cd ${{ steps.strings.outputs.build-output-dir }}
            ls -l
            cp ${{ steps.strings.outputs.plugin-name }}  "${{ steps.strings.outputs.target-folder }}/${{ steps.strings.outputs.plugin-name }}.D"
            ls -l ${{ steps.strings.outputs.target-folder }}
          fi

      - name: Upload MacOS Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-macos-${{ matrix.build_type }}
          path: |
            ${{ github.workspace }}/release/*

  build-win:
    if: ( 1 == 2 )
    runs-on: windows-latest
    needs: [pre-build]
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest ]
        build_type: [ Debug, Release ]
        #build_type: [ Debug ]
        c_compiler: [ cl ]
        cpp_compiler: [ cl ]

    steps:
      - uses: actions/checkout@v4

      - name: Set Windows reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}\cmake_build" >> "$GITHUB_OUTPUT"
          echo "target-folder=${{ github.workspace }}\release\win_x64" >> "$GITHUB_OUTPUT"
          echo "plugin-name=test_yaml" >> "$GITHUB_OUTPUT"
          echo "OS Build: ${{ matrix.os }}"


      - name: Check Windows Stats
        shell: cmd
        run: |
          systeminfo
          wmic cpu get Name, NumberOfCores, MaxClockSpeed
          REM wmic NumberOfCores
          REM echo "core-count=$( wmic NumberOfCores )" >> "$GITHUB_OUTPUT"
          echo "Workspace: ${{ github.workspace }} "
          md cmake_build
          DIR ${{ github.workspace }}


      - name: Configure & Build Windows Binaries using CMake
        shell: cmd
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: |
          echo "Prepare CMake Build ${{ matrix.build_type }}"
          cmake -B ${{ steps.strings.outputs.build-output-dir }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -S ${{ github.workspace }}          
          
          REM Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
          echo "Running CMake Build"
          cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} -j 2


      - name: Post Build - Prepare binaries folder prior to loading into artifact
        shell: cmd
        run: |
          REM echo "Output Folder Tree and Files in '${{ steps.strings.outputs.build-output-dir }}' folder:"          
          REM dir /S ${{ steps.strings.outputs.build-output-dir }}          
          REM for /R "${{ steps.strings.outputs.build-output-dir }}" "%a" IN (*.xpl) DO echo "%a"
          
          
          echo "make release folder"          
          md ${{ steps.strings.outputs.target-folder }}

          echo "Copy all ".xpl" files to release folder:"
          IF "${{ matrix.build_type }}" == "Release" (
             echo "Coping the Release binaries"
             
             cd "${{ steps.strings.outputs.build-output-dir }}\${{ matrix.build_type }}"

             dir 

             echo copy /B /Y "${{ steps.strings.outputs.plugin-name }}.exe" "${{ steps.strings.outputs.target-folder }}\${{ steps.strings.outputs.plugin-name }}.xpl"
             copy /B /Y "${{ steps.strings.outputs.plugin-name }}.exe" "${{ steps.strings.outputs.target-folder }}\${{ steps.strings.outputs.plugin-name }}.xpl"             
             
          ) ELSE (
            echo "Coping the Debug binaries"
            cd "${{ steps.strings.outputs.build-output-dir }}\${{ matrix.build_type }}"

            dir 

            echo copy /B /Y "${{ steps.strings.outputs.plugin-name }}.exe" "${{ steps.strings.outputs.target-folder }}\${{ steps.strings.outputs.plugin-name }}.xpl.D"
            copy /B /Y "${{ steps.strings.outputs.plugin-name }}.exe" "${{ steps.strings.outputs.target-folder }}\${{ steps.strings.outputs.plugin-name }}.xpl.D"

          )
          echo "Display Release Structure:"
          dir /S ${{ steps.strings.outputs.target-folder }}


      - name: Post Build - Compress debug binary using PowerShell
        if: (  startsWith(matrix.build_type, 'Debug' ) )
        shell: powershell
        run: |
          # Compress a single file
          cd ${{ steps.strings.outputs.target-folder }}
          
          Write-Host "Before compressing."
          dir
          
          Compress-Archive -Path "${{ steps.strings.outputs.plugin-name }}.xpl.D" -DestinationPath "${{ steps.strings.outputs.plugin-name }}.win.D.zip"
                   
          if (Test-Path "${{ steps.strings.outputs.plugin-name }}.win.D.zip") {
            Write-Host "The file '${{ steps.strings.outputs.plugin-name }}.win.D.zip' exists."
            Remove-Item "${{ steps.strings.outputs.plugin-name }}.xpl.D" -Force
          } else {
            Write-Host "The file '${{ steps.strings.outputs.plugin-name }}.win.D.zip' does not exists."
          }
          
          Write-Host "After Compressing"
          dir
          

      - name: Upload Windows Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-win-${{ matrix.build_type }}
          path: |
            ${{ github.workspace }}/release/*
            



  build-lin:
    runs-on: ubuntu-22.04
    needs: [pre-build]
    #if: ( 1 == 2 )
    strategy:
      fail-fast: false
      matrix:
        build_type: [ Debug, Release ]
        c_compiler: [ gcc ]
        cpp_compiler: [ g++ ]
    # Steps to download artifact and combine to final build
    steps:
      - uses: actions/checkout@v4 


      - name: Set Linux reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/cmake_build" >> "$GITHUB_OUTPUT"
          echo "target-folder=${{ github.workspace }}/release/lin_x64" >> "$GITHUB_OUTPUT"
          echo "plugin-name=test_yaml" >> "$GITHUB_OUTPUT"
          echo "OS Build: ${{ matrix.os }}"
          
          echo -e "\nGlobal Variable value for 'global-test-var' is: ${{ steps.strings.outputs.global-test-var }} \n"


      - name: Check Linux Stats
        shell: bash
        run: |
          echo -e "\n---->\nnproc:"
          nproc
          echo -e "\nlscpu:"
          lscpu 


      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}


      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} -- -j 4


      - name: Post Build - Prepare binaries folder prior to loading into artifact
        shell: bash
        run: |
          echo "make release folder"
          mkdir -p ${{ steps.strings.outputs.target-folder }}
          
          echo "Display files in the working folders"
          find ${{ steps.strings.outputs.build-output-dir }} -maxdepth 2 -type f          
          
          if [[ "${{ matrix.build_type }}" == "Release" ]]; then
            echo -e "Coping the Release binaries"
            cd ${{ steps.strings.outputs.build-output-dir }}
            ls -l
            cp ${{ steps.strings.outputs.plugin-name }}  "${{ steps.strings.outputs.target-folder }}/${{ steps.strings.outputs.plugin-name }}"
            ls -l ${{ steps.strings.outputs.target-folder }}
          else
            echo -e "Coping the Debug binaries"
            cd ${{ steps.strings.outputs.build-output-dir }}
            ls -l
            cp ${{ steps.strings.outputs.plugin-name }}  "${{ steps.strings.outputs.target-folder }}/${{ steps.strings.outputs.plugin-name }}.D"
            ls -l ${{ steps.strings.outputs.target-folder }}
          fi

      - name: Upload Linux Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-lin-${{ matrix.build_type }}
          path: |
            ${{ github.workspace }}/release/*

  build:
    #if: ( startsWith(github.ref_name, 'v') )
    runs-on: ubuntu-22.04
    #needs: [ build-lin ]
    needs: [build-win, build-osx, build-lin ]

    # Steps to download artifact and combine to final build
    steps:
      - uses: actions/checkout@v4 
        with:
          fetch-depth: 0

      - name: Set build reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/release/test_yaml01" >> "$GITHUB_OUTPUT"          
          echo "plugin-name=test_yaml01" >> "$GITHUB_OUTPUT"
          echo "OS Build: ${{ matrix.os }}"

          echo "Check gh version"
          gh --version

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./download

      - name: Prepare release folder
        shell: bash
        run: |
          echo -e "\n-- github.ref_name: ${{ github.ref_name }} -- \n"
          
          echo -e "Display download folder content"
          ls -ltR ./download
          
          echo -e "Create the build folder [${{ steps.strings.outputs.build-output-dir }}]"
          mkdir -p ${{ steps.strings.outputs.build-output-dir }}
          ls -l
          
          echo -e "\n\nDisplay build folders before copy:\n\n"
          ls -ltR ${{ steps.strings.outputs.build-output-dir }}
          
          echo "copy folders"
          cp -rdp ./download/*/*_x64 ${{ steps.strings.outputs.build-output-dir }}   
          
          echo -e "\n\nDisplay after folders before copy:\n\n"                    
          ls -ltR ${{ steps.strings.outputs.build-output-dir }}
          
          rm -rf ./download

      - name: Prepare Release Branch
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |          
          
          TARGET_BRANCH="dry-run"
          if [[ "${{ github.ref_name }}" =~ ^v ]]; then
            TARGET_BRANCH="release"          
          fi
          
          echo -e "The target branch is: '$TARGET_BRANCH' "
          
          if [ -d "release" ]; then
            cd release  ## The build folder is not dynamic by name. Should always be release
          
            ## Create target branch
            echo -e "Create the new branch: $TARGET_BRANCH" 
            git checkout -b ${TARGET_BRANCH}
                    
            echo -e "Configuring git before pushing branch '${TARGET_BRANCH}' ."
            git config --global user.email "snagar.dev@protonmail.com"
            git config --global user.name "snagar"
          
            echo -e "Adding GH (Github Client) information." 
            gh ${TARGET_BRANCH} create "${{ github.ref_name }}" --title "Release ${{ github.ref_name }}" --notes-file ${{ github.workspace }}/notes.md 
                        
            echo -e "--- Display Branches ---"
            git branch -a          
            
            echo "---display folders ---"
            ls -lR          
            echo "-----"
            echo "Adding files to branch: ${TARGET_BRANCH}"                                  
            git add .         
            echo -e "\n---- git status ---->"
            git status
            echo -e "\n<---------"
            
            
            if [[ "$TARGET_BRANCH" != "dry-run" ]]; then 
              echo -e "\nCommit branch ${TARGET_BRANCH}\n---------------------"
              git commit -m "new ${TARGET_BRANCH} - ${{ github.ref_name }}"
                            
              echo -e "github.actor: ${{ github.actor }},  github.repository: ${{ github.repository }}"
              echo -e "\ngithub.ref - ${{ github.ref }} - ${{ github.ref_name }} \n"
              git remote add authenticated-origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
            
              ### Push the branch back.. or not
                      
              echo -e "\nPushing ${TARGET_BRANCH}\n---------------------"
              git push authenticated-origin ${TARGET_BRANCH} --force
                        
              echo -e "TARGET_BRANCH - ${TARGET_BRANCH}"
              echo -e "\ngithub.ref - ${{ github.ref }} - ${{ github.ref_name }} \n"
              git branch -a
            else
              echo "Will not push back the '$TARGET_BRANCH'. It is only for tests."
            fi
          else
            echo -e "Could not find [release] directory."
            ls -l
          fi


      - name: Prepare Compressed Binary Files
        if: ( startsWith(github.ref_name, 'v') )
        shell: bash
        run: |
          # Prepare the release compressed file
          VERSION=${GITHUB_REF##*/}          
          echo -e "\nVERSION=${VERSION}\n"
          
          folder_to_compress="${{ github.workspace }}/release"
          output_file="${{ github.workspace }}/${{ steps.strings.outputs.plugin-name }}-${VERSION}.7z"
          split_size="90m"
          
          echo "Compressing '$folder_to_compress' to '$output_file'..."
          # (cd ./release && 7z a -t7z -v"$split_size" "${{ github.workspace }}/${{ steps.strings.outputs.plugin-name }}-${VERSION}.7z" *)
          (cd ./release && 7z a -t7z "${{ github.workspace }}/${{ steps.strings.outputs.plugin-name }}-${VERSION}.7z" *)
          
          echo -e "\n---------"
          ls -l
          echo -e "\n---------"
          

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        if: ( startsWith(github.ref_name, 'v') )
        with:
          files: |
            ${{ github.workspace }}/${{ steps.strings.outputs.plugin-name }}*7z*
          prerelease: ${{ contains(github.ref_name, '-b') || contains(github.ref_name, 'beta') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
          
