# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Release for - Windows, MacOS and Linux

## Auto run workflow, only if we have a tag that starts with v*
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:


jobs:
  build-osx:
    runs-on: macos-14
    strategy:
      fail-fast: false
      matrix:
        build_type: [ Debug, Release ]
        c_compiler: [ clang ]
        cpp_compiler: [ clang++ ]

    steps:
      - uses: actions/checkout@v4

      - name: Set MacOS reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/cmake_build" >> "$GITHUB_OUTPUT"
          echo "target_folder=${{ github.workspace }}/release/mac_x64" >> "$GITHUB_OUTPUT"
          echo "plugin_name=test_yaml" >> "$GITHUB_OUTPUT"
          echo "OS Build: ${{ matrix.os }}"

      - name: Check MacOS Stats
        shell: bash
        run: |
          echo -e "\n---->\nhw.physicalcpu:"
          sysctl -n hw.physicalcpu
          echo -e "\nhw.logicalcpu:"
          sysctl -n hw.logicalcpu
          echo -e "\nSystem Profiler - Hardware:"
          system_profiler SPHardwareDataType
          echo -e "\n---------------------\n"

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}


      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} -- -j 4


      - name: Post Build - Prepare binaries folder prior to loading into artifact
        shell: bash
        run: |
          echo "make release folder"
          mkdir -p ${{ steps.strings.outputs.target_folder }}
          
          echo "Display files in the working folders"
          find ${{ steps.strings.outputs.build-output-dir }} -maxdepth 2 -type f          
          
          if [[ "${{ matrix.build_type }}" == "Release" ]]; then
            echo -e "Coping the Release binaries"
            cd ${{ steps.strings.outputs.build-output-dir }}
            ls -l
            cp ${{ steps.strings.outputs.plugin_name }}  "${{ steps.strings.outputs.target_folder }}/${{ steps.strings.outputs.plugin_name }}"
            ls -l ${{ steps.strings.outputs.target_folder }}
          else
            echo -e "Coping the Debug binaries"
            cd ${{ steps.strings.outputs.build-output-dir }}
            ls -l
            cp ${{ steps.strings.outputs.plugin_name }}  "${{ steps.strings.outputs.target_folder }}/${{ steps.strings.outputs.plugin_name }}.D"
            ls -l ${{ steps.strings.outputs.target_folder }}
          fi

      - name: Upload MacOS Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-macos-${{ matrix.build_type }}
          path: |
            ${{ github.workspace }}/release/*

  build-win:
    #if: ( 1 == 2 )
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest ]
        build_type: [ Debug, Release ]
        #build_type: [ Debug ]
        c_compiler: [ cl ]
        cpp_compiler: [ cl ]

    steps:
      - uses: actions/checkout@v4

      - name: Set Windows reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}\cmake_build" >> "$GITHUB_OUTPUT"
          echo "target_folder=${{ github.workspace }}\release\win_x64" >> "$GITHUB_OUTPUT"
          echo "plugin_name=test_yaml" >> "$GITHUB_OUTPUT"
          echo "OS Build: ${{ matrix.os }}"


      - name: Check Windows Stats
        shell: cmd
        run: |
          systeminfo
          wmic cpu get Name, NumberOfCores, MaxClockSpeed
          REM wmic NumberOfCores
          REM echo "core-count=$( wmic NumberOfCores )" >> "$GITHUB_OUTPUT"
          echo "Workspace: ${{ github.workspace }} "
          md cmake_build
          DIR ${{ github.workspace }}


      - name: Configure & Build Windows Binaries using CMake
        shell: cmd
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: |
          echo "Prepare CMake Build ${{ matrix.build_type }}"
          cmake -B ${{ steps.strings.outputs.build-output-dir }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -S ${{ github.workspace }}          
          
          REM Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
          echo "Running CMake Build"
          cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} -j 2


      - name: Post Build - Prepare binaries folder prior to loading into artifact
        shell: cmd
        run: |
          REM echo "Output Folder Tree and Files in '${{ steps.strings.outputs.build-output-dir }}' folder:"          
          REM dir /S ${{ steps.strings.outputs.build-output-dir }}          
          REM for /R "${{ steps.strings.outputs.build-output-dir }}" "%a" IN (*.xpl) DO echo "%a"
          
          
          echo "make release folder"          
          md ${{ steps.strings.outputs.target_folder }}

          echo "Copy all ".xpl" files to release folder:"
          IF "${{ matrix.build_type }}" == "Release" (
             echo "Coping the Release binaries"
             
             cd "${{ steps.strings.outputs.build-output-dir }}\${{ matrix.build_type }}"

             dir 

             echo copy /B /Y "${{ steps.strings.outputs.plugin_name }}.exe" "${{ steps.strings.outputs.target_folder }}\${{ steps.strings.outputs.plugin_name }}.xpl"
             copy /B /Y ""${{ steps.strings.outputs.plugin_name }}.exe" "${{ steps.strings.outputs.target_folder }}\${{ steps.strings.outputs.plugin_name }}.xpl"             
             
          ) ELSE (
            echo "Coping the Debug binaries"
            cd "${{ steps.strings.outputs.build-output-dir }}\${{ matrix.build_type }}"

            dir 

            echo copy /B /Y "${{ steps.strings.outputs.plugin_name }}.exe" "${{ steps.strings.outputs.target_folder }}\${{ steps.strings.outputs.plugin_name }}.xpl.D"
            copy /B /Y "${{ steps.strings.outputs.plugin_name }}.exe" "${{ steps.strings.outputs.target_folder }}\${{ steps.strings.outputs.plugin_name }}.xpl.D"

          )
          echo "Display Release Structure:"
          dir /S ${{ steps.strings.outputs.target_folder }}

          REM for /R "${{ steps.strings.outputs.build-output-dir }}" "%a" IN (missionx.xpl) DO copy /B /Y "%a" "${{ steps.strings.outputs.target_folder }}/missionx.xpl.D"


      - name: Upload Windows Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-win-${{ matrix.build_type }}
          path: |
            ${{ github.workspace }}/release/*
            



  build-lin:
    runs-on: ubuntu-22.04
    #if: ( 1 == 2 )
    strategy:
      fail-fast: false
      matrix:
        build_type: [ Debug, Release ]
        c_compiler: [ gcc ]
        cpp_compiler: [ g++ ]
    # Steps to download artifact and combine to final build
    steps:
      - uses: actions/checkout@v4 


      - name: Set Linux reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/cmake_build" >> "$GITHUB_OUTPUT"
          echo "target_folder=${{ github.workspace }}/release/lin_x64" >> "$GITHUB_OUTPUT"
          echo "plugin_name=test_yaml" >> "$GITHUB_OUTPUT"
          echo "OS Build: ${{ matrix.os }}"


      - name: Check Linux Stats
        shell: bash
        run: |
          echo -e "\n---->\nnproc:"
          nproc
          echo -e "\nlscpu:"
          lscpu 


      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}


      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} -- -j 4


      - name: Post Build - Prepare binaries folder prior to loading into artifact
        shell: bash
        run: |
          echo "make release folder"
          mkdir -p ${{ steps.strings.outputs.target_folder }}
          
          echo "Display files in the working folders"
          find ${{ steps.strings.outputs.build-output-dir }} -maxdepth 2 -type f          
          
          if [[ "${{ matrix.build_type }}" == "Release" ]]; then
            echo -e "Coping the Release binaries"
            cd ${{ steps.strings.outputs.build-output-dir }}
            ls -l
            cp ${{ steps.strings.outputs.plugin_name }}  "${{ steps.strings.outputs.target_folder }}/${{ steps.strings.outputs.plugin_name }}"
            ls -l ${{ steps.strings.outputs.target_folder }}
          else
            echo -e "Coping the Debug binaries"
            cd ${{ steps.strings.outputs.build-output-dir }}
            ls -l
            cp ${{ steps.strings.outputs.plugin_name }}  "${{ steps.strings.outputs.target_folder }}/${{ steps.strings.outputs.plugin_name }}.D"
            ls -l ${{ steps.strings.outputs.target_folder }}
          fi

      - name: Upload Linux Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-lin-${{ matrix.build_type }}
          path: |
            ${{ github.workspace }}/release/*

  build:
    runs-on: ubuntu-22.04
    needs: [build-win, build-osx, build-lin ]
    # Steps to download artifact and combine to final build
    steps:
      - uses: actions/checkout@v4 
        with:
          fetch-depth: 0

      - name: Set build reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build/missionx" >> "$GITHUB_OUTPUT"          
          echo "plugin_name=test_yaml01" >> "$GITHUB_OUTPUT"
          echo "OS Build: ${{ matrix.os }}"


      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./download

      - name: Prepare release folder
        shell: bash
        run: |
          echo -e "Display download folder content"
          ls -ltR ./download
          
          echo -e "Create the build folder"
          mkdir -p ${{ steps.strings.outputs.build-output-dir }}
          echo -e "\n\nDisplay build folders before copy:\n\n"
          ls -ltR ${{ steps.strings.outputs.build-output-dir }}
          
          echo "copy folders"
          cp -rdp ./download/*/*_x64 ${{ steps.strings.outputs.build-output-dir }}   
          
          echo -e "\n\nDisplay after folders before copy:\n\n"
          ls -ltR ${{ steps.strings.outputs.build-output-dir }}
          
          
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        if: ( startsWith(github.ref_name, 'v') )
        with:
          files: |
            ${{ steps.strings.outputs.build-output-dir }}/*
          prerelease: ${{ contains(github.ref_name, '-b') || contains(github.ref_name, 'beta') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
          
          
          
